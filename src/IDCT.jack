class IDCT 
{
    field Array base;

    constructor IDCT new(){
        var int i;
        let base = Array.new(64);
        let i = 0;
        while(i < 64) {
            let base[i] = Float.new(0, 0);
            let i = i + 1;
        }
        return this;
    }

    method Float GetFromBase (int index) {
        return base[index];
    }

    function Float NormCoeff(int n){
        if (n = 0){return Float.new(0,353);}

        return Float.new(0,5);
    }

    method void AddIDC(int n, int m, int coeff){
        var Float an,am, mm, nn, something;
        var int y, x, linXY;
        let y = 0;
        let x = 0;
    
        while(y < 8){
            while (x < 8) {
                
                let nn = Cos.GetCos(n,x);
                let mm = Cos.GetCos(m,y);
                let something = Float.new(coeff, 0);

                let something = something.Mult(nn);
                do nn.dispose();
                let something = something.Mult(mm);
                do mm.dispose();
                
                let linXY = Extensions.XYtoLin(x,y);
                
                let base[linXY] = something.Add(base[linXY]);
                do something.dispose();
                let x = x + 1;
            }
            let y = y + 1;
        }
        return;
    }

    method void AddZigZag(int zi, int coeff){
        var int i, n, m;
        let i = Extensions.GetZigZag(zi);

        let n = i & 7;
        let m = i / 8;
        do AddIDC(n, m, coeff);
        return;
    }

    method void dispose() {
        do base.dispose();
        do Memory.deAlloc(this);
        return;
    }

}