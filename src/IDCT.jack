class IDCT 
{
    field Array base, zigzag;

    constructor IDCT new(){
        let base = Array.new(64);
        return this;
    }

    function Float NormCoeff(int n){
        if (n = 0){return Float.new(0,3535);}

        return Float.new(0,5);
    }

    method void AddIDC(int n, int m, int coeff){
        var Float an,am, mm, nn, npi, mpi, xp, yp, something;
        var int y,x;
        let an = IDCT.NormCoeff(n);
        let am = IDCT.NormCoeff(m);

        
        let y = 0;
        let x = 0;

        let npi = Float.new(3,14);
        let npi = npi.intMult(n);
        let npi = npi.intDiv(8);

        let mpi = Float.new(3,14);
        let mpi = mpi.intMult(m);
        let mpi = mpi.intDiv(8);

        let xp = Float.new(0,5);
        
        let yp = Float.new(0,5);

        while(y < 8){
            while (x < 8){
                
                let nn = an.Mult(Extensions.Cos(npi.Mult(xp))); 
                let mm = am.Mult(Extensions.Cos(mpi.Mult(yp)));

                let something = nn.Mult(mm);
                let something = something.intMult(coeff);
                let base[Extensions.XYtoLin(x,y)] = base[Extensions.XYtoLin(x,y)] + (something);
                
                do xp.intAdd(1);
                let x = x + 1;
            }
            do yp.intAdd(1);
            let y = y + 1;
        }
        return;
    }

    method void AddZigZag(int zi, int coeff){
        var int i, n, m;
        let i = zigzag[zi];

        let n = i & 7;
        let m = i / 8;
        do AddIDC(n, m, coeff);
        return;
    }

}