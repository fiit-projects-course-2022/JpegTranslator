class Extensions {
    
    function int Clamp (int color) {
        if (color > 255) { return 255; }
        if (color < 0) { return 0; }
        return color;
    }

    function Array GetArray (int arrStart, int arrEnd, int sliceLen) {
        var Array result;
        var int i, arrSize;

        if (arrEnd < arrStart + sliceLen) { 
            do Sys.error(4);
        }

        let result = Array.new(sliceLen);
        let i = 0;
        while(i < sliceLen) {
            let result[i] = Bytes.GetByte(arrStart + i);
            let i = i + 1;
        }
        return result;
    }

    function int DecodeNumber (int code, int bits) {
        var int l, i;
        let l = Extensions.Pow(code, bits - 1);

        if (bits < l) {
            return bits - (2 * l - 1);
        }
        return bits;
    }

    function int XYtoLin(int x, int y) {
        return y * 8 + x;
    }

    // Raises base to the power of power, supports power = 0
    function int Pow(int base, int power) {
        var int i, l;

        let l = 1;
        let i = 0;
        while (i < power) {
            let l = l * base;
            let i = i + 1;
        }
        return l;
    }

    function int GetIntLen(int n){
        var int res;
        let res = 0;

        var int k;
        let k = n;

        while (k > 0){
            let k = k / 10;
            let res = res + 1;
        }
        return res;
    }

    function int Factorial(int n){
        var int res;
        let res = 1;
        var int i;
        let i = n;
        while (i > 0){
            let res = res * i;
            let i = i - 1;
        }
        return res;
    }

    function Float Cos(Float a){
        var Float res;
        let res = 1;
        var int sign;
        let sign = -1;
        var int i;
        let i = 0;
        var Float x;
        let x = Float.new(0,0);
        let x = x.Add(a);
        var Float y;
        let y = Float.new();

        while(i < 10){
            let x = x.Mult(x);
            let x = x.intMult(sign);
            let y = x.intMult(1);
            let y = y.intDiv(Extensions.Factorial(i));
            res = res.Add(y);
            let i = i + 2;
        }
        return res;
    }
}