class Decoder {
    function void Decode () {
        // Тут надо считывать байты из изображения с помощью вспомогательного класса Bytes
        var bool loop;
        var int byteIndex, header1, header2, lenChunk, chunkIndex;
        let byteIndex = 0;
        while(loop){
            let header1 = Bytes.GetByte(byteIndex);
            let header2 = Bytes.GetByte(byteIndex+1)

            if (header1 = 255 & header2 = 216) {
                let lenChunk = 2;
            }
            else{
                if (head1 = 255 & header2 = 217) {
                    return;
                } else {
                    let lenChunk = 256 * Bytes.GetByte(byteIndex + 2) + Bytes.GetByte(byteIndex + 3) + 2;
                    let chunkIndex = byteIndex + 4;
                    if (header1 = 255){
                        if (header2 = 219) { DefineQuantisationTables(chunkIndex, lenChunk);} 
                        if (header2 = ) }
                    }
                }
            }
        }
    }

    function void DefineHuffmanTables(int dataLength){ 
        var int off, header, sumLengths, i, staticOff; 
        var Array lengths, elements, tempArray;
        let lengths = Array.new(16);
        var HuffmanTable huffmanTable;

        let staticOff = 0;

        while (dataLength > 0){
            let off = staticOff;
            let header = Bytes.GetByte(off);
            let off = off + 1;

            let lengths = Gavno.GetArray(off, off+16, 16)
            let off = off + 16;

            let sumLengths = lengths[0]+lengths[1]+lengths[2]+lengths[3]+lengths[4]+lengths[5]+lengths[6]+lengths[7]+lengths[8]+lengths[9]+lengths[10]+lengths[11]+lengths[12]+lengths[13]+lengths[14]+lengths[15];
            let elements = Array.new(sumLengths);
            let i = 0;
            while(i < 16){
                let i = i + 1;
                let tempArray = Array.new(lengths[i]);
                let tempArray = Gavno.GetArray(off, off+lengths[i], lengths[i]);
                let off = off + i;
            }
            
            hf = HuffmanTable.new();
            hf.GetHuffmanBits(lengths, elements);
            let this.tables[header] = hf;

            let staticOff = off;
        }
    }
}