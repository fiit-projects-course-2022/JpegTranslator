class Decoder {
    field Array tables;

    method void Decode () {
        // Тут надо считывать байты из изображения с помощью вспомогательного класса Bytes
        var int byteIndex, header1, header2, chunkLen, chunkIndex;
        let byteIndex = 0;
        while(true){
            let header1 = Bytes.GetByte(byteIndex);
            let header2 = Bytes.GetByte(byteIndex+1);

            if (header1 = 255 & header2 = 216) { // start of file: marker = FFD8
                let chunkLen = 2;
            }
            else{
                if (header1 = 255 & header2 = 217) { // end of file: marker = FFD9
                    return;
                } else {
                    let chunkLen = 256 * Bytes.GetByte(byteIndex + 2) + Bytes.GetByte(byteIndex + 3) + 2;
                    let chunkIndex = byteIndex + 4;
                    if (header1 = 255){
                        if (header2 = 219) { do DefineQuantisationTables(chunkIndex, chunkLen - 4);} // quantization table: marker = FFDB
                        if (header2 = 192) { do BaseLineDCT(chunkIndex, chunkLen - 4); } // marker = FFC0
                        if (header2 = 196) { do DefineHuffmanTables(chunkIndex, chunkLen - 4); } // marker = FFC4
                        if (header2 = 218) { let chunkLen = StartOfScan(byteIndex, chunkLen); }
                        } 
                    }
                }
            let byteIndex = chunkLen;
            if (Byte.GetByte(byteIndex) = -1) { return; }
            }
        return;
    }   

    method void DefineHuffmanTables(int dataIndex, int dataLength) { 
        var int off, header, sumLengths, i, j, staticOff, elementsIndex; 
        var Array lengths, elements, tempArray;
        var HuffmanTable hf;
        let lengths = Array.new(16);

        let staticOff = dataIndex;

        while (dataLength > 0){
            let off = staticOff;
            let header = Bytes.GetByte(off);
            let off = off + 1;

            let lengths = Extensions.GetArray(off, off+16, 16);
            let off = off + 16;

            let sumLengths = lengths[0]+lengths[1]+lengths[2]+lengths[3]+lengths[4]+lengths[5]+lengths[6]+lengths[7]+lengths[8]+lengths[9]+lengths[10]+lengths[11]+lengths[12]+lengths[13]+lengths[14]+lengths[15]; //смешная операция :D
            let elements = Array.new(sumLengths); 
            let i = 0;
            let elementsIndex = 0;
            while(i < 16){
                let i = i + 1;
                let tempArray = Extensions.GetArray(off, off+lengths[i], lengths[i]);
                let off = off + i;

                let j = 0; //добавляем значения tempArray в конец elements
                while (j < lengths[i]){ 
                    let elements[elementsIndex] = tempArray[j];
                    let j = j + 1;
                    let elementsIndex = elementsIndex + 1;
                }
            }
            
            let hf = HuffmanTable.new();
            do hf.GetHuffmanBits(lengths, elements);
            let tables[header] = hf;

            let staticOff = off;
        }
        return;
    }
}